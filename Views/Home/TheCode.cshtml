
@{
    ViewData["Title"] = "TheCode";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Main Body Section -->
<main class="flex-shrink-0">
    <div class="container py-5 pt-5 mt-5">
        <h2 class="tittle border-1 border-bottom border-dark">The Code for Project Palindrome</h2>
        <div class="row row-cols-1 row-cols-lg-2">
            <div class="col-lg-8">
                <pre class="line-numbers"><code class="language-javascript">
                    // Pseudo code
                    // --------------------------------------------------
                    // 1. Get the user input from the string they provide.
                    // 2. Loop through the string
                    // 3. make sure that only strings can be used and remove any space from the inpt 
                    // 4. If the string is a Palindrome then print a congrats message to the sceen. 
                    // 5. Else print a fail message Palindrome to the screen
                    // --------------------------------------------------

                    using Microsoft.AspNetCore.Mvc;
                    using Microsoft.Extensions.Logging;
                    using PalindromeMVC.Models;
                    using System.Diagnostics;
                    using System.Text.RegularExpressions;

                    namespace PalindromeMVC.Controllers
                    {
                        public class HomeController : Controller
                        {
                            private readonly ILogger<HomeController> _logger;

                            public HomeController(ILogger<HomeController> logger)
                            {
                                _logger = logger;
                            }

                            public IActionResult Index()
                            {
                                return View();
                            }

                            public IActionResult TheCode()
                            {
                                return View();
                            }

                            // Get the selected View
                            [HttpGet]
                            public IActionResult Palindrome()
                            {
                                PalindromeClass model = new();
                                return View(model);
                            }

                            //New Action - get the post info
                            [HttpPost]
                            // Making sure we are operating wihtin our form
                            [ValidateAntiForgeryToken]

                            // Create a action with the param class i want to full info from
                            public IActionResult Palindrome(PalindromeClass palindrome)
                            {
                                // Get our input
                                string inputWord = palindrome.InputWord;

                                // Reverse the word
                                string revWord = "";

                                // The palindrome algo using a for loop
                                for (int i = inputWord.Length - 1; i >= 0; i--)
                                {
                                    revWord += inputWord[i];
                                }
                                // Setting the Class var RevWord to revWord
                                palindrome.RevWord = revWord;

                                // Using Regex to clean up the words 
                                revWord = Regex.Replace(revWord.ToLower(), "[^a-zAZ0-9]+", "");
                                inputWord = Regex.Replace(inputWord.ToLower(), "[^a-zAZ0-9]+", "");

                                //Eval the revWord against inputWord
                                if (revWord == inputWord)
                                {
                                    palindrome.IsPalindrome = true;
                                    palindrome.Message = $"Success, your word {palindrome.InputWord} is a Palindrome";
                                } else
                                {
                                    palindrome.IsPalindrome = false;
                                    palindrome.Message = $"Sorry, your word {palindrome.InputWord} is Not a Palindrome";
                                }
                                return View(palindrome);
                            }


                            [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
                            public IActionResult Error()
                            {
                                return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
                            }
                        }
                    }
                </code></pre>
            </div>
            <div class="col-lg-4">
                <p>The code is struched in 3 functione and one control statment</p>
                <h5>Project Palindrome Presented using <span><a target="_blank" href="https://prismjs.com/index.html">Prism.js</a></span></h5>
                <p class="lead">The goal of this project is to input a string and use a function to check if it is a palindrome.
                    A palindrome is a word or phrase that reads the same backward and forward. When palindromes are the length of a sentence, they ignore capitalization, punctuation, and word boundaries. 
                </p>
            </div>
        </div>
    </div>
</main>

<!-- Prism JS File -->
<script src="/js/prism.js"></script>
<script>
    Prism.plugins.NormalizeWhitespace.setDefaults({
        'remove-trailing': true,
        'remove-indent': true,
        'left-trim': true,
        'right-trim': true
    })
</script>

